generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = "postgres://postgres:postgres@localhost:5432/x3api-local"
}

model Fingerprint {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  timestamp DateTime @default(now()) @db.Timestamp(6)
  ip        String?  @db.VarChar(60)
  visitorId String?
  meta      Json
  tenantId  String?
  tenant    Tenant?  @relation(fields: [tenantId], references: [id])

  @@index([timestamp])
  @@index([userId, timestamp])
}

model AccessLog {
  id        String    @id @default(cuid())
  userId    String
  service   String    @db.VarChar(100)
  timestamp DateTime  @default(now()) @db.Timestamp(6)
  ip        String?   @db.VarChar(60)
  user      User      @relation(fields: [userId], references: [id])
  deletedAt DateTime?

  @@index([timestamp])
  @@index([userId, timestamp])
}

model AlertLog {
  id        String    @id @default(cuid())
  message   String    @db.VarChar(300)
  severity  String    @db.VarChar(8)
  timestamp DateTime  @default(now()) @db.Timestamp(6)
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  deletedAt DateTime?

  @@index([timestamp])
  @@index([userId, timestamp])
}

model Domain {
  id              String    @id @default(cuid())
  tenantId        String
  tenant          Tenant    @relation(fields: [tenantId], references: [id])
  siteId          String
  site            Site      @relation(fields: [siteId], references: [id])
  verificationTxt String?
  verifiedAt      DateTime?
  domainUrl       String    @unique
  createdAt       DateTime  @default(now())
  createdAtDate   DateTime  @default(now()) @db.Date
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  isDefault       Boolean   @default(false)

  @@unique([tenantId, isDefault])
}

model AuditLog {
  id         String    @id @default(cuid())
  message    String?   @db.VarChar(300)
  userId     String?
  timestamp  DateTime  @default(now()) @db.Timestamp(6)
  subject    String?   @map("subject") @db.VarChar(50)
  identifier String?
  newValue   Json?     @map("new_value") @db.Json
  oldValue   Json?     @map("old_value") @db.Json
  user       User?     @relation(fields: [userId], references: [id], onDelete: Restrict)
  deletedAt  DateTime?

  @@index([timestamp])
  @@index([userId, timestamp])
}

model User {
  id                        String                  @id @default(cuid())
  legacyMongoId             String?
  /// Username will be generated by default
  username                  String                  @default(cuid())
  password                  String?
  email                     String?
  phoneNumber               String?
  firstName                 String?
  lastName                  String?
  metadata                  Json?
  tenantId                  String?
  tenant                    Tenant?                 @relation(fields: [tenantId], references: [id])
  account                   Account[]
  wallet                    Wallet[]
  accessLogs                AccessLog[]
  alertLogs                 AlertLog[]
  auditLogs                 AuditLog[]
  createdAt                 DateTime                @default(now())
  createdAtDate             DateTime                @default(now()) @db.Date
  updatedAt                 DateTime                @updatedAt
  lastLoggedInAt            DateTime?
  Transaction               Transaction[]
  gameProviderPlayer        GameProviderPlayer[]
  deletedAt                 DateTime?
  roleId                    String
  role                      Role                    @relation(fields: [roleId], references: [id])
  depositDisabledStartAt    DateTime?
  depositDisabledEndAt      DateTime?
  withdrawalDisabledStartAt DateTime?
  withdrawalDisabledEndAt   DateTime?
  loginDisabledStartAt      DateTime?
  loginDisabledEndAt        DateTime?
  promotionDisabledStartAt  DateTime?
  promotionDisabledEndAt    DateTime?
  maxDailyDepositLimit      Int?
  maxDailyDepositCount      Int?
  maxDailyWithdrawalLimit   Int?
  maxDailyWithdrawalCount   Int?
  currency                  Currency
  credentials               Credential[]
  gameCategory              GameCategory[]
  gameCategorySetting       GameCategorySetting[]
  fingerprints              Fingerprint[]
  userKYCMethodResponses    UserKYCMethodResponse[]
  PhoneOTP                  PhoneOTP[]
  UserGroup                 UserGroup[]
  UserPromotion             UserPromotion[]

  @@unique([username, tenantId])
  @@unique([email, tenantId])
  @@unique([phoneNumber, tenantId])
}

model PhoneOTP {
  id              String    @id @default(cuid())
  phoneNumber     String
  /// Optional because might not exist yet
  userId          String?
  user            User?     @relation(fields: [userId], references: [id])
  phoneVerifiedAt DateTime?
  phoneOtp        String
  phoneOtpExpiry  DateTime?
}

model Role {
  id            String    @id @default(cuid())
  name          String
  abilities     Json      @default("{}")
  tenantId      String?
  tenant        Tenant?   @relation(fields: [tenantId], references: [id])
  createdAt     DateTime  @default(now())
  createdAtDate DateTime  @default(now()) @db.Date
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  user          User[]
}

enum TenantRegisterMethod {
  ONE_CLICK
  EMAIL_AND_PASSWORD
  EMAIL_MAGIC
  PHONE
  PHONE_OTP
}

enum TenantKYCType {
  FIRST_NAME
  LAST_NAME
  FULL_NAME
  PHONE
  PHONE_OTP
  EMAIL_VERIFICATION
  IDENTITY_CARD
  PASSPORT
}

model UserKYCMethodResponse {
  id          String          @id @default(cuid())
  kycMethodId String
  kycMethod   TenantKYCMethod @relation(fields: [kycMethodId], references: [id])
  response    Json
  userId      String
  user        User            @relation(fields: [userId], references: [id])
}

model TenantKYCMethod {
  id                     String                  @id @default(cuid())
  stage                  Int
  priority               Int
  type                   TenantKYCType
  tenantId               String
  tenant                 Tenant                  @relation(fields: [tenantId], references: [id])
  createdAt              DateTime                @default(now())
  createdAtDate          DateTime                @default(now()) @db.Date
  updatedAt              DateTime                @updatedAt
  userKYCMethodResponses UserKYCMethodResponse[]
}

model Tenant {
  id                           String                         @id @default(cuid())
  name                         String
  legacyMongoId                String?                        @unique
  createdAt                    DateTime                       @default(now())
  createdAtDate                DateTime                       @default(now()) @db.Date
  updatedAt                    DateTime                       @updatedAt
  deletedAt                    DateTime?
  currencies                   String[]
  defaultCurrency              String? // ISO4217 currency code
  languages                    String[]
  defaultLanguage              String? // 2 letters language code
  registerMethods              TenantRegisterMethod[]
  users                        User[]
  domains                      Domain[]
  paymentGatewayChannelSetting PaymentGatewayChannelSetting[]
  paymentGatewaySetting        PaymentGatewaySetting[]
  gameSetting                  GameSetting[]
  gameProviderSetting          GameProviderSetting[]
  account                      Account[]
  transaction                  Transaction[]
  role                         Role[]
  legacyContent                LegacyContent[]
  site                         Site[]
  page                         Page[]
  block                        Block[]
  credentials                  Credential[]
  gameCategory                 GameCategory[]
  gameCategorySetting          GameCategorySetting[]
  maintenance                  Maintenance[]
  fingerprints                 Fingerprint[]
  kycMethods                   TenantKYCMethod[]
  promotion                    Promotion[]
}

model Block {
  id            String    @id @default(cuid())
  type          Json      @default("{}")
  content       String
  meta          Json      @default("{}")
  priority      Int?
  tenantId      String
  tenant        Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  publishedAt   DateTime
  expiredAt     DateTime
  createdAt     DateTime  @default(now())
  createdAtDate DateTime  @default(now()) @db.Date
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}

model Game {
  id                String            @id @default(cuid())
  name              String
  slug              String
  code              String            @unique
  isEnabledDefault  Boolean
  hasFreebetSupport Boolean
  gameCategoryId    String
  gameCategory      GameCategory      @relation(fields: [gameCategoryId], references: [id])
  gameSetting       GameSetting[]
  maintenances      Maintenance[]
  transactions      Transaction[]
  gameProviderId    String
  // gameCategorySettingId String?
  attachmentId      String?
  gameProvider      GameProvider      @relation(fields: [gameProviderId], references: [id], onDelete: Cascade)
  // gameCategorySetting   GameCategorySetting? @relation(fields: [gameCategorySettingId], references: [id])
  thumbnail         File?             @relation(fields: [attachmentId], references: [id])
  createdAt         DateTime          @default(now())
  createdAtDate     DateTime          @default(now()) @db.Date
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  metadata          Json?
  PlayerFavourite   PlayerFavourite[]

  @@index([gameProviderId, code])
}

enum SettingType {
  ORIGINAL
  PLATFORM
  TENANT
}

model GameSetting {
  id                String        @id @default(cuid())
  name              String
  type              SettingType
  tenant            Tenant?       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String? // null means platform
  game              Game          @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId            String
  isActive          Boolean
  isFeatured        Boolean
  thumbnailId       String?
  thumbnail         File?         @relation(fields: [thumbnailId], references: [id])
  maintenance       Maintenance[]
  featuringPriority Int?
  metadata          Json?
  deletedAt         DateTime?

  @@unique([tenantId, gameId, type])
  @@index([tenantId, gameId])
}

enum GameProviderNatureType {
  DIRECT
  AGGREGATOR
}

model GameProvider {
  id                   String                @id @default(cuid())
  name                 String
  slug                 String
  code                 String?
  parentId             String?
  parent               GameProvider?         @relation("GameProviderToGameProvider", fields: [slug, parentId], references: [slug, parentId])
  children             GameProvider[]        @relation("GameProviderToGameProvider")
  providerType         String
  isEnabledDefault     Boolean
  gameProviderSettings GameProviderSetting[]
  rootProviderType     GameProviderType
  providerNature       GameProviderNature
  thumbnailId          String?
  thumbnail            File?                 @relation(fields: [thumbnailId], references: [id])
  games                Game[]
  currencyPrecision    Int                   @default(2)

  createdAt     DateTime  @default(now())
  createdAtDate DateTime  @default(now()) @db.Date
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  maintenance Maintenance[]

  @@unique([slug, parentId])
  @@index([slug, parentId])
}

model GameProviderSetting {
  id             String        @id @default(cuid())
  type           SettingType
  isActive       Boolean
  isFeatured     Boolean
  hasPriority    Int?
  hasRate        Int
  maintenance    Maintenance[]
  clientEndpoint String?
  metadata       Json?         @default("{}")
  thumbnail      File?         @relation(fields: [thumbnailId], references: [id])
  thumbnailId    String?
  gameProvider   GameProvider  @relation(fields: [gameProviderId], references: [id], onDelete: Cascade)
  gameProviderId String
  tenant         Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId       String
  credential     Credential?   @relation(fields: [credentialId], references: [id])
  credentialId   String?

  createdAt     DateTime  @default(now())
  createdAtDate DateTime  @default(now()) @db.Date
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  @@unique([type, gameProviderId, tenantId])
  @@index([type, gameProviderId, tenantId])
}

enum CredentialType {
  ORIGINAL
  PLATFORM
  TENANT
  GAME
  PAYMENT
}

model Credential {
  id                    String                  @id @default(cuid())
  name                  String
  type                  CredentialType
  data                  Json                    @default("{}")
  clientEndpoint        String?
  key                   Json
  isActive              Boolean                 @default(true)
  isMasked              Boolean                 @default(false)
  // Default api key to use
  isDefault             Boolean                 @default(false)
  // Enabled for new tenant by default
  isEnabledDefault      Boolean                 @default(true)
  userId                String?
  tenantId              String?
  user                  User?                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant                Tenant?                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  gameProviderSetting   GameProviderSetting[]
  transactions          Transaction[]
  createdAt             DateTime                @default(now())
  createdAtDate         DateTime                @default(now()) @db.Date
  updatedAt             DateTime                @updatedAt
  deletedAt             DateTime?
  PaymentGatewaySetting PaymentGatewaySetting[]

  @@unique([isDefault, name, tenantId])
  @@unique([isEnabledDefault, name, tenantId])
}

model GameProviderPlayer {
  id              String            @id @default(cuid())
  userId          String
  foreignUserId   String
  currency        Currency
  providerType    GameProviderType
  createdAt       DateTime          @default(now())
  createdAtDate   DateTime          @default(now()) @db.Date
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  PlayerFavourite PlayerFavourite[]

  @@unique([userId, foreignUserId, providerType])
}

model GameCategory {
  id                   String                @id @default(cuid())
  name                 String
  slug                 String
  gameCategorySettings GameCategorySetting[]
  gameId               String?
  userId               String?
  tenantId             String?
  user                 User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant               Tenant?               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  updatedAt            DateTime              @updatedAt
  createdAt            DateTime              @default(now())
  createdAtDate        DateTime              @default(now()) @db.Date
  deletedAt            DateTime?
  Game                 Game[]
}

model GameCategorySetting {
  id             String        @id @default(cuid())
  type           SettingType
  name           String
  isActive       Boolean
  maintenance    Maintenance[]
  gameCategoryId String?
  userId         String?
  tenantId       String?

  gameCategory  GameCategory? @relation(fields: [gameCategoryId], references: [id], onDelete: Cascade)
  user          User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant        Tenant?       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  createdAtDate DateTime      @default(now()) @db.Date
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?

  @@unique([tenantId, gameCategoryId, type])
}

enum GameProviderNature {
  AGGREGATOR
  SUBORDINATE
  DIRECT_LINE
}

enum GameProviderType {
  QTECH
  PRAGMATIC
  AWC
  FACHAI
  NEXTSPIN
  SBO
  IGS
  JOKER
  PGSOFT
  NT
  REDTIGER
  KINGMAKER
  EVOLUTION
  DREAM
  HABANERO
  MG
  SPADEGAMING
  PLAYSTAR
  ROYALGCLUB
  SPRIBE
  SAGAMING
  SIMPLEPLAY
}

enum DomainType {
  ROOT
  TENANT
  AFFILIATE
}

model Bank {
  id            String     @id @default(cuid())
  name          String
  shortName     String
  currencies    Currency[]
  code          String     @unique
  accounts      Account[]
  createdAt     DateTime   @default(now())
  createdAtDate DateTime   @default(now()) @db.Date
  updatedAt     DateTime   @updatedAt
  deletedAt     DateTime?
}

model Site {
  id             String    @id @default(cuid())
  seoTitle       String
  seoDescription String?
  attachmentId   String?
  seoLogo        File?     @relation(fields: [attachmentId], references: [id])
  seoKeywords    String?
  domain         Domain[]
  pages          Page[]
  tenant         Tenant?   @relation(fields: [tenantId], references: [id])
  tenantId       String?
  createdAt      DateTime  @default(now())
  createdAtDate  DateTime  @default(now()) @db.Date
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  @@unique([tenantId])
  @@index([tenantId])
}

model Page {
  id             String    @id @default(cuid())
  seoTitle       String
  seoDescription String?
  attachmentId   String?
  seoLogo        File?     @relation(fields: [attachmentId], references: [id])
  seoKeywords    String?
  permalink      String
  // blocks         Block[]
  tenantId       String
  tenant         Tenant    @relation(fields: [tenantId], references: [id])
  publishedAt    DateTime?
  createdAt      DateTime  @default(now())
  createdAtDate  DateTime  @default(now()) @db.Date
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  site           Site?     @relation(fields: [siteId], references: [id])
  siteId         String?
  content        String?

  @@unique([tenantId, permalink])
}

model Account {
  id             String         @id @default(cuid())
  currency       Currency
  accountChannel AccountChannel
  accountType    AccountType
  name           String?
  isTenant       Boolean        @default(false)
  isPlayer       Boolean        @default(false)
  accountNumber  String
  accountName    String
  maintenance    Maintenance[]
  active         Boolean        @default(false)
  meta           Json           @default("{}")
  minAmount      Int            @default(0)
  maxAmount      Int            @default(0)
  bankId         String?
  userId         String?
  tenantId       String?
  bank           Bank?          @relation(fields: [bankId], references: [id])
  user           User?          @relation(fields: [userId], references: [id])
  tenant         Tenant?        @relation(fields: [tenantId], references: [id])
  transactions   Transaction[]
  createdAt      DateTime       @default(now())
  createdAtDate  DateTime       @default(now()) @db.Date
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
}

enum Currency {
  THB
  MYR
  USD
  SGD
  IDR
}

enum AccountChannel {
  FIAT
  CRYPTO
  EWALLET
}

enum AccountType {
  DEPOSIT
  WITHDRAWAL
  BOTH
}

enum PaymentGatewayProviderType {
  MANUAL
  VADERPAY
  BTCPAY
  LINE
  AMPAY
  PIGSPIN
}

model PaymentGateway {
  id                     String                     @id @default(cuid())
  name                   String
  providerType           PaymentGatewayProviderType
  transaction            Transaction[]
  paymentGatewaySettings PaymentGatewaySetting[]
  paymentGatewayChannel  PaymentGatewayChannel[]
  createdAt              DateTime                   @default(now())
  createdAtDate          DateTime                   @default(now()) @db.Date
  updatedAt              DateTime                   @updatedAt
  deletedAt              DateTime?

  @@unique([providerType])
}

model PaymentGatewaySetting {
  id               String         @id @default(cuid())
  active           Boolean        @default(false)
  tenantId         String
  paymentGatewayId String
  metadata         Json           @default("{}")
  tenant           Tenant         @relation(fields: [tenantId], references: [id])
  paymentGateway   PaymentGateway @relation(fields: [paymentGatewayId], references: [id])
  createdAt        DateTime       @default(now())
  createdAtDate    DateTime       @default(now()) @db.Date
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
  credentialId     String
  credential       Credential     @relation(fields: [credentialId], references: [id])

  @@unique([tenantId, paymentGatewayId])
}

model PaymentGatewayChannel {
  id                            String                         @id @default(cuid())
  name                          String
  paymentGatewayId              String
  purpose                       AccountType
  paymentGateway                PaymentGateway                 @relation(fields: [paymentGatewayId], references: [id])
  paymentGatewayChannelSettings PaymentGatewayChannelSetting[]
  createdAt                     DateTime                       @default(now())
  createdAtDate                 DateTime                       @default(now()) @db.Date
  updatedAt                     DateTime                       @updatedAt
  transaction                   Transaction[]
  deletedAt                     DateTime?

  @@unique([paymentGatewayId, name, purpose])
}

model PaymentGatewayChannelSetting {
  id            String                @id @default(cuid())
  active        Boolean               @default(false)
  tenantId      String
  channelId     String
  tenant        Tenant                @relation(fields: [tenantId], references: [id])
  channel       PaymentGatewayChannel @relation(fields: [channelId], references: [id])
  createdAt     DateTime              @default(now())
  createdAtDate DateTime              @default(now()) @db.Date
  updatedAt     DateTime              @updatedAt
  deletedAt     DateTime?

  @@unique([tenantId, channelId])
}

enum WalletPurpose {
  MAIN
  BONUS
  REBATE
}

model Wallet {
  id                   String        @id @default(cuid())
  userId               String
  currency             Currency
  purpose              WalletPurpose
  balance              Int           @default(0)
  pending              Int           @default(0)
  active               Boolean       @default(true)
  user                 User          @relation(fields: [userId], references: [id])
  createdAt            DateTime      @default(now())
  createdAtDate        DateTime      @default(now()) @db.Date
  updatedAt            DateTime      @updatedAt
  transaction          Transaction[]
  deletedAt            DateTime?
  isLock               Boolean       @default(false)
  lockedTurnoverAmount Int           @default(0)
  lockedBonusAmount    Int           @default(0)

  @@unique([userId, currency, purpose])
}

enum TransactionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionPurpose {
  BET
  WIN
  LOSS
  ROLLBACK
  ROLLBACK_BONUS
  BONUS
  BONUS_WITHDRAWAL
  DEPOSIT
  WITHDRAWAL
  OFFRECORD_DEPOSIT
  OFFRECORD_WITHDRAWAL
  OFFRECORD_ADD_BONUS
  OFFRECORD_REMOVE_BONUS
  PROMOTION
  REBATE
}

enum LegacyContentType {
  POPUP
  ANNOUNCEMENT
  BANNER
}

model LegacyContent {
  id            String            @id @default(uuid())
  type          LegacyContentType
  attachmentId  String?
  imageUrl      File?             @relation(fields: [attachmentId], references: [id])
  title         String
  description   String?
  href          String?
  priority      Int?
  isActive      Boolean           @default(true)
  tenantId      String
  tenant        Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  publishedAt   DateTime?
  expiredAt     DateTime?
  createdAt     DateTime          @default(now())
  createdAtDate DateTime          @default(now()) @db.Date
  updatedAt     DateTime          @updatedAt
  deletedAt     DateTime?

  @@index([tenantId])
}

model Transaction {
  id                      String                 @id @default(cuid())
  amount                  Int
  currency                Currency
  status                  TransactionStatus?
  purpose                 TransactionPurpose
  note                    String?
  meta                    Json?
  rollbackTransactionId   String?                @unique
  affiliateId             String?
  userId                  String
  walletId                String
  externalTranId          String?
  gameId                  String?
  roundId                 String?
  paymentGateWayId        String?
  accountId               String?
  statusChangeOn          DateTime?
  createdAt               DateTime               @default(now())
  createdAtDate           DateTime               @default(now()) @db.Date
  updatedAt               DateTime               @updatedAt
  paymentGatewayChannelId String?
  tenantId                String
  tenant                  Tenant                 @relation(fields: [tenantId], references: [id])
  game                    Game?                  @relation(fields: [gameId], references: [id])
  paymentGatewayChannel   PaymentGatewayChannel? @relation(fields: [paymentGatewayChannelId], references: [id])
  paymentGateway          PaymentGateway?        @relation(fields: [paymentGateWayId], references: [id])
  rollbackTransaction     Transaction?           @relation("rollbackTransaction", fields: [rollbackTransactionId], references: [id])
  rollbackedBy            Transaction?           @relation("rollbackTransaction")
  user                    User                   @relation(fields: [userId], references: [id])
  account                 Account?               @relation(fields: [accountId], references: [id])
  wallet                  Wallet                 @relation(fields: [walletId], references: [id])
  deletedAt               DateTime?
  attachmentId            String?
  attachment              File?                  @relation(fields: [attachmentId], references: [id])
  credential              Credential?            @relation(fields: [credentialId], references: [id])
  credentialId            String?
  userPromotionId         String?                @unique
  userPromotion           UserPromotion?         @relation(fields: [userPromotionId], references: [id])
  promotionId             String?
  promotion               Promotion?             @relation(fields: [promotionId], references: [id])
}

model File {
  id                    String                @id @default(cuid())
  s3ObjectId            String
  presignedUrl          String?
  presignedUrlExpiredAt DateTime?
  payload               Json                  @default("{}")
  createdAt             DateTime              @default(now())
  createdAtDate         DateTime              @default(now()) @db.Date
  updatedAt             DateTime              @updatedAt
  deletedAt             DateTime?
  name                  String?
  content               String?
  attachmentId          String?
  public                Boolean               @default(true)
  transaction           Transaction[]
  gameProviderSetting   GameProviderSetting[]
  gameProvider          GameProvider[]
  game                  Game[]
  gameSetting           GameSetting[]
  LegacyContent         LegacyContent[]
  Page                  Page[]
  Site                  Site[]
  promotionAttachment   PromotionAttachment[]
  promotion             Promotion[]
}

enum MaintenanceType {
  GAME_PROVIDER
  GAME_CATEGORY
  GAME
  PAYMENT_PROVIDER
  PAYMENT_CHANNEL
  ACCOUNT
}

model Maintenance {
  id                    String               @id @default(cuid())
  note                  String?
  isActive              Boolean
  startAt               DateTime
  endAt                 DateTime
  gameId                String?
  gameProviderId        String?
  gameSettingId         String?
  tenantId              String?
  accountId             String?
  gameProviderSettingId String?
  gameCategorySettingId String?
  account               Account?             @relation(fields: [accountId], references: [id])
  game                  Game?                @relation(fields: [gameId], references: [id])
  gameProvider          GameProvider?        @relation(fields: [gameProviderId], references: [id])
  gameSetting           GameSetting?         @relation(fields: [gameSettingId], references: [id])
  tenant                Tenant?              @relation(fields: [tenantId], references: [id])
  gameProviderSetting   GameProviderSetting? @relation(fields: [gameProviderSettingId], references: [id])
  gameCategorySetting   GameCategorySetting? @relation(fields: [gameCategorySettingId], references: [id])
  createdAt             DateTime             @default(now())
  createdAtDate         DateTime             @default(now()) @db.Date
  updatedAt             DateTime             @default(now())
  deletedAt             DateTime?
}

model PlayerFavourite {
  id                   String             @id @default(cuid())
  gameId               String
  gameProviderPlayerId String
  game                 Game               @relation(fields: [gameId], references: [id])
  gameProviderPlayer   GameProviderPlayer @relation(fields: [gameProviderPlayerId], references: [id])

  createdAt     DateTime  @default(now())
  createdAtDate DateTime  @default(now()) @db.Date
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}

enum GroupType {
  GROUP
  TAG
}

model Group {
  id                String           @id @default(cuid())
  name              String
  type              GroupType
  rules             Json
  actions           Json
  automationPeriod  Json?
  nextRunAt         DateTime
  UserGroup         UserGroup[]
  createdAt         DateTime         @default(now())
  createdAtDate     DateTime         @default(now()) @db.Date
  updatedAt         DateTime         @updatedAt
  deletedAt         DateTime?
  promotionReward   PromotionReward? @relation(fields: [promotionRewardId], references: [id])
  promotionRewardId String?
}

enum UserGroupType {
  AUTO
  MANUAL
}

model UserGroup {
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  groupId       String
  group         Group         @relation(fields: [groupId], references: [id])
  type          UserGroupType
  createdAt     DateTime      @default(now())
  createdAtDate DateTime      @default(now()) @db.Date
  updatedAt     DateTime      @updatedAt

  @@unique([userId, groupId])
}

enum PromotionType {
  PROMOTION
  REBATE
}

model Promotion {
  id                               String                         @id @default(cuid())
  type                             PromotionType
  name                             String
  imageId                          String
  image                            File                           @relation(fields: [imageId], references: [id])
  isActive                         Boolean
  code                             String
  description                      String
  howToApply                       String
  terms                            String
  startAt                          DateTime
  endAt                            DateTime?
  endAfterNumOfCycle               Int?
  currentCycle                     Int?
  currentCycleStartAt              DateTime?
  currentCycleEndAt                DateTime?
  totalClaimedAmount               Int                            @default(0)
  totalNumOfUserClaimed            Int                            @default(0)
  attachments                      PromotionAttachment[]
  joinRules                        PromotionRule[]                @relation("joinPromotionId")
  viewRules                        PromotionRule[]                @relation("viewPromotionId")
  claimRules                       PromotionRule[]                @relation("claimPromotionId")
  rewards                          PromotionReward[]
  promotionCycleSettingId          String?                        @unique
  cycleSetting                     PromotionCycleSetting?         @relation(fields: [promotionCycleSettingId], references: [id])
  promotionClaimSettingId          String                         @unique
  claimSetting                     PromotionClaimSetting          @relation(fields: [promotionClaimSettingId], references: [id])
  promotionLockWithdrawalSettingId String                         @unique
  lockWithdrawalSetting            PromotionLockWithdrawalSetting @relation(fields: [promotionLockWithdrawalSettingId], references: [id])
  promotionForfeitSettingId        String                         @unique
  forfeitSetting                   PromotionForfeitSetting        @relation(fields: [promotionForfeitSettingId], references: [id])
  createdAt                        DateTime                       @default(now())
  createdAtDate                    DateTime                       @default(now()) @db.Date
  updatedAt                        DateTime                       @updatedAt
  deletedAt                        DateTime?
  UserPromotion                    UserPromotion[]
  tenantId                         String
  tenant                           Tenant                         @relation(fields: [tenantId], references: [id])
  Transaction                      Transaction[]
}

enum PromotionCycleUnit {
  HOUR
  DAY
  WEEK
  MONTH
}

model PromotionCycleSetting {
  id            String             @id @default(cuid())
  interval      Int
  unit          PromotionCycleUnit
  time          String? // HH:mm
  day           String? // MON,TUE / 1,14,15 (day, date)
  createdAt     DateTime           @default(now())
  createdAtDate DateTime           @default(now()) @db.Date
  updatedAt     DateTime           @updatedAt
  promotion     Promotion?
}

enum PromotionRuleType {
  USER
  GROUP
  TAG
  SIGNUP
  LOGIN
  NUMBER_OF_TRANSACTION
  BET_AMOUNT
  DEPOSIT_AMOUNT
  GAME
  GAME_CATEGORY
  GAME_PROVIDER
  DEPOSIT_ACCOUNT
  DEPOSIT_GATEWAY
}

model PromotionRule {
  id                  String            @id @default(cuid())
  type                PromotionRuleType
  dateFrom            DateTime?
  dateTo              DateTime?
  withinLastNumOfDays Int?
  amount              Int?
  values              Json?
  createdAt           DateTime          @default(now())
  createdAtDate       DateTime          @default(now()) @db.Date
  updatedAt           DateTime          @updatedAt
  joinPromotion       Promotion?        @relation("joinPromotionId", fields: [joinPromotionId], references: [id])
  joinPromotionId     String?
  viewPromotion       Promotion?        @relation("viewPromotionId", fields: [viewPromotionId], references: [id])
  viewPromotionId     String?
  claimPromotion      Promotion?        @relation("claimPromotionId", fields: [claimPromotionId], references: [id])
  claimPromotionId    String?
}

model PromotionAttachment {
  promotionId  String
  promotion    Promotion @relation(fields: [promotionId], references: [id])
  attachmentId String
  attachment   File      @relation(fields: [attachmentId], references: [id])

  @@unique([promotionId, attachmentId])
}

enum PromotionRewardType {
  FIXED_MIN_DEPOSIT
  PECENTAGE_OF_WALLET_BALANCE
}

enum PromotionRewardBonusType {
  FIXED
  PERCENTAGE
}

model PromotionReward {
  id             String                   @id @default(cuid())
  groups         Group[]
  type           PromotionRewardType
  bonusType      PromotionRewardBonusType
  conditionValue Int
  bonusValue     Int
  minPayoutAmt   Int                      @default(0)
  maxPayoutAmt   Int
  targetRounds   Int
  promotionId    String?
  promotion      Promotion?               @relation(fields: [promotionId], references: [id])
  createdAt      DateTime                 @default(now())
  createdAtDate  DateTime                 @default(now()) @db.Date
  updatedAt      DateTime                 @updatedAt
  UserPromotion  UserPromotion[]
}

model PromotionClaimSetting {
  id                                String     @id @default(cuid())
  maxClaimAmount                    Int
  endPromotionWhenMaxClaimAmountHit Boolean    @default(false)
  maxNumOfPlayer                    Int?
  endPromotionWhenMaxNumOfPlayerHit Boolean    @default(false)
  maxClaimPerPlayer                 Int?
  maxClaimPerIp                     Int?
  createdAt                         DateTime   @default(now())
  createdAtDate                     DateTime   @default(now()) @db.Date
  updatedAt                         DateTime   @updatedAt
  promotion                         Promotion?
}

enum PromotionLockWithdrawalType {
  WALLET_BALANCE
  TURNOVER_AMOUNT
  BONUS_AMOUNT
  NO_LOCK
}

model PromotionLockWithdrawalSetting {
  id                                String                      @id @default(cuid())
  type                              PromotionLockWithdrawalType
  unlockOnCompletion                Boolean                     @default(false)
  unlockOnPromotionExpire           Boolean                     @default(false)
  unlockWhenPlayerBalanceFallsBelow Int?
  createdAt                         DateTime                    @default(now())
  createdAtDate                     DateTime                    @default(now()) @db.Date
  updatedAt                         DateTime                    @updatedAt
  promotion                         Promotion?
}

model PromotionForfeitSetting {
  id                String     @id @default(cuid())
  requireApproval   Boolean
  minWageringAmount Int?
  // to-do: time limit setting
  createdAt         DateTime   @default(now())
  createdAtDate     DateTime   @default(now()) @db.Date
  updatedAt         DateTime   @updatedAt
  promotion         Promotion?
}

enum UserPromotionStatus {
  COMPLETED
  IN_PROGRESS
  EXPIRED
}

model UserPromotion {
  id                String              @id @default(cuid())
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  promotionId       String
  promotion         Promotion           @relation(fields: [promotionId], references: [id])
  promotionRewardId String?
  reward            PromotionReward?    @relation(fields: [promotionRewardId], references: [id])
  status            UserPromotionStatus
  statusChangeAt    DateTime
  ip                String
  turnover          Int
  targetTurnover    Int
  rounds            Int
  cycle             Int
  Transaction       Transaction?
  createdAt         DateTime            @default(now())
  createdAtDate     DateTime            @default(now()) @db.Date
  updatedAt         DateTime            @updatedAt
}
